{
    "__jsonqualname__": "rafcon.core.states.execution_state.ExecutionState", 
    "description": "Works similar to the ros run in the shell.\n\nParameters:\n- package  e.g. 'tts_cerevoice'\n- executable e.g. 'tts_server.py'\n- args - args - e.g. '[u'clean:=yes']' - Note: Put one complete arg as one string item in the list\n- node_name '/tts' - to check if the node is running\n- restart_node_if_running - if True the it will restart the node\n\nCreates a new thread where the node can run. \n\nA problem is, that it can not really be stopped only if rafcon gets shutdown or the you call it again, then it forces it to restart.", 
    "income": {
        "__jsonqualname__": "rafcon.core.state_elements.logical_port.Income"
    }, 
    "input_data_ports": {
        "0": {
            "__jsonqualname__": "rafcon.core.state_elements.data_port.InputDataPort", 
            "data_port_id": 0, 
            "data_type": {
                "__type__": "__builtin__.str"
            }, 
            "default_value": "tts_cerevoice", 
            "name": "package"
        }, 
        "1": {
            "__jsonqualname__": "rafcon.core.state_elements.data_port.InputDataPort", 
            "data_port_id": 1, 
            "data_type": {
                "__type__": "__builtin__.str"
            }, 
            "default_value": "tts_server.py", 
            "name": "executable"
        }, 
        "2": {
            "__jsonqualname__": "rafcon.core.state_elements.data_port.InputDataPort", 
            "data_port_id": 2, 
            "data_type": {
                "__type__": "__builtin__.list"
            }, 
            "default_value": [], 
            "name": "args"
        }, 
        "3": {
            "__jsonqualname__": "rafcon.core.state_elements.data_port.InputDataPort", 
            "data_port_id": 3, 
            "data_type": {
                "__type__": "__builtin__.str"
            }, 
            "default_value": "/tts", 
            "name": "node_name"
        }, 
        "4": {
            "__jsonqualname__": "rafcon.core.state_elements.data_port.InputDataPort", 
            "data_port_id": 4, 
            "data_type": {
                "__type__": "__builtin__.bool"
            }, 
            "default_value": false, 
            "name": "restart_node_if_running"
        }
    }, 
    "name": "ros run", 
    "outcomes": {
        "-2": {
            "__jsonqualname__": "rafcon.core.state_elements.logical_port.Outcome", 
            "name": "preempted", 
            "outcome_id": -2
        }, 
        "-1": {
            "__jsonqualname__": "rafcon.core.state_elements.logical_port.Outcome", 
            "name": "aborted", 
            "outcome_id": -1
        }, 
        "0": {
            "__jsonqualname__": "rafcon.core.state_elements.logical_port.Outcome", 
            "name": "success", 
            "outcome_id": 0
        }
    }, 
    "output_data_ports": {}, 
    "state_id": "WBRKNE"
}